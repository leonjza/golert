{
  "queries": {
    "arp_spoofing": {
      "query": "select routes.gateway, arp_cache.mac from routes left join arp_cache on routes.gateway == arp_cache.address where destination = '0.0.0.0' and type = 'gateway';",
      "interval": 15,
      "description": "Gateway IP / MAC change. Potential ARP spoof."
    },
    "macos_listening_ports": {
      "query": "select processes.pid, processes.path, name, port, protocol from listening_ports left join processes on processes.pid == listening_ports.pid where address in ('0.0.0.0', '::/0', '::') and port > 0 and processes.path not in ('/Applications/Docker.app/Contents/Resources/bin/vpnkit', '/usr/sbin/mDNSResponder', '/Applications/VMware Fusion.app/Contents/Library/vmnet-natd', '/usr/sbin/syslogd', '/Library/Application Support/Viscosity/openvpn', '/usr/libexec/timed', '/usr/libexec/rapportd', '/usr/libexec/airportd', '/usr/libexec/configd', '/usr/libexec/sharingd', '/usr/sbin/netbiosd') group by processes.path;",
      "interval": 15,
      "platform": "darwin",
      "description": "Processes with an open listening port on all interfaces."
    },
    "dns_lookup_for_invalid_name": {
      "query": "select response_code, bytes from curl where user_agent = 'Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko' and url = 'http://this.is.not.valid.local/wpad.dat' and response_code > 0;",
      "interval": 60,
      "description": "DNS name resolution (and query for wpad.dat) for an invalid domain."
    },
    "arp_neighbours": {
      "query": "select address, mac, interface from arp_cache where permanent != 1;",
      "interval": 30,
      "description": "Check who our immediate network neighbours are."
    }
  }
}
